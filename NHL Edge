# Scrape Regular Season Data for 2024-25 NHL Edge
library(tidyverse)
library(dplyr)
library(purrr)
library(httr)
library(stringr)
library(glue)
library(websocket)

get_skater_Ids <- function(seasonId) {

    json <-
      glue("https://api.nhle.com/stats/rest/en/skater/bios?limit=-1&start=0&sort=points&cayenneExp=seasonId={seasonId}") |>
      httr::GET() |>
      httr::content(type = "text", encoding = "UTF-8") |>
      jsonlite::fromJSON()
    
    skater_bios <- json |>
      purrr::pluck("data") |>
      tibble::as_tibble() |>
      dplyr::select(
        player = skaterFullName,
        id = playerId,
        position = positionCode,
        dob = birthDate
      ) |>
      dplyr::mutate(season = paste0(substr(seasonId, 1, 4), substr(seasonId, 7, 8))) |>
      dplyr::mutate(stage = "regular") |>
      dplyr::select(player, id, season, position, dob, stage) |>
      dplyr::distinct()
}

skater_bios <- get_skater_Ids(20242025)

ws_call_combos <-
  tidyr::expand_grid(
    sectionName = c("skatingdistance", "zonetime"),
    manpower = c("all", "es", "pp", "pk")
  ) |>
  dplyr::bind_rows(
    tidyr::expand_grid(
      sectionName = c("skatingspeed", "shotspeed"),
      manpower = "all"
    )
  )

skater_bios <-
  skater_bios |>
  dplyr::group_by(player, id, season, position, dob) |>
  dplyr::mutate(
    ws_call_combos =
      purrr::map(
        T,
        function(x) {
          ws_call_combos
        }
      )
  ) |>
  tidyr::unnest(ws_call_combos) |>
  dplyr::mutate(
    # this is a return value the server sends with each response.  I can set the
    # value on my end so I can identify what player/season/section I'm making
    # the call for
    target = "{sectionName}_{manpower}_{stage}-{id}-{season}" |>
      glue::glue()
  )

ws <- websocket::WebSocket$new("wss://edge.nhl.com/en/skater/")

ws$onOpen(function(event) {
  message("WebSocket opened.")
})

# Wait to ensure connection is open (very important)
Sys.sleep(2)

ws$onMessage(function(event) {
  if (!is.null(event)) {
    # the websocket returns the data in json format
    data <- jsonlite::fromJSON(event$data)
    
    if (!is.null(data)) {
      # this is the target from line 63, I split by hyphen (-) to identify
      # which call this is a response to
      target <-
        data$target |>
        stringr::str_split("-") |>
        purrr::flatten_chr()
      
      if (stringr::str_detect(target[1], "skatingdistance")) {
        data$html |>
          rvest::read_html() |>
          rvest::html_element("#skatingdistance-datebarchart") |>
          rvest::html_attr("data-json") |>
          jsonlite::fromJSON() |>
          purrr::pluck("chartData") |>
          tibble::tibble() |>
          dplyr::transmute(
            id = target[2],
            season = target[3],
            date,
            value,
            tooltip =
              purrr::map(
                tooltip,
                function(x) {
                  x |>
                    tibble::enframe(name = NULL, value = "tooltip") |>
                    dplyr::mutate(desc = c("dist", "game", "toi")) |>
                    tidyr::pivot_wider(values_from = tooltip, names_from = desc) |>
                    dplyr::select(game, toi)
                }
              )
          ) |>
          tidyr::unnest(tooltip) |>
          # use the target again to write to a csv to save every response
          readr::write_csv("{target[1]}.csv" |> glue::glue(), append = T)
        
        ####
        ## Important! The csv files won't start writing untill all the messages
        ## have been sent to the server and the responses are received!  I
        ## don't know the technical reason for this, but for whatever reason,
        ## the response is not 1:1.  Sometimes responses are sent twice as well.
        ## I'll repeat this below too
        ####
      } else if (stringr::str_detect(target[1], "zonetime")) {
        data$html |>
          rvest::read_html() |>
          rvest::html_element("#zonetime-zonechart") |>
          rvest::html_attr("data-json") |>
          jsonlite::fromJSON() |>
          purrr::pluck("chartData") |>
          tibble::tibble() |>
          dplyr::transmute(
            id = target[2],
            season = target[3],
            zone,
            zonetime_perc = abs(value) / 100
          ) |>
          readr::write_csv("{target[1]}.csv" |> glue::glue(), append = T)
      } else if (stringr::str_detect(target[1], "skatingspeed")) {
        html <-
          data$html |>
          rvest::read_html()
        
        max_speed_date <-
          html |>
          rvest::html_element("span") |>
          rvest::html_attr("data-tooltip")
        
        html |>
          rvest::html_table() |>
          purrr::flatten_df() |>
          dplyr::select(X1, X2) |>
          # print() |>
          tail(-1) |>
          # print() |>
          dplyr::mutate(X2 = X2 |> as.character() |> stringr::str_remove(",") |> as.numeric()) |>
          tidyr::pivot_wider(names_from = X1, values_from = X2) |>
          dplyr::mutate(
            id = target[2],
            season = target[3],
            max_speed_date = max_speed_date
          ) |>
          readr::write_csv("{target[1]}.csv" |> glue::glue(), append = T)
      } else if (stringr::str_detect(target[1], "shotspeed")) {
        html <-
          data$html |>
          rvest::read_html()
        
        max_speed_date <-
          html |>
          rvest::html_element("span") |>
          rvest::html_attr("data-tooltip")
        
        html |>
          rvest::html_table() |>
          purrr::flatten_df() |>
          tail(-1) |>
          dplyr::select(X1, X2) |>
          dplyr::mutate(X2 = X2 |> as.character() |> stringr::str_remove(",") |> as.numeric()) |>
          tidyr::pivot_wider(names_from = X1, values_from = X2) |>
          dplyr::mutate(
            id = target[2],
            season = target[3],
            max_speed_date = max_speed_date
          ) |>
          readr::write_csv("{target[1]}.csv" |> glue::glue(), append = T)
      } else {
        print("section not coded yet")
      }
    } else {
      print("NULL data")
    }
  } else {
    print("event returned NULL")
  }
})

skater_bios |>
  # I like to test my functions using head() which will pull the first six
  # rows/items
  # head() |>
  dplyr::mutate(
    scrape_attempted =
      purrr::pmap_lgl(
        list(
          season = season,
          id = id,
          target = target,
          sectionName = sectionName,
          manpower = manpower,
          stage = stage
        ),
        function(season, id, target, sectionName, manpower, stage) {
          # create the message payload in json format
          send_json <-
            '{
              "type":"action",
              "event":{
                "domain":"edge.nhl.com",
                "uri":"/en/skater/{{season}}-regular-{{id}}",
                "action":"load",
                "data":{
                  "renderFunction":"renderProfileContent",
                  "target":"{{target}}",
                  "params":{
                    "sectionName":"{{sectionName}}",
                    "units":"imperial",
                    "manpower":"{{manpower}}",
                    "season":"{{season}}",
                    "stage":"{{stage}}",
                    "feed":"skatersProfiles",
                    "id":"{{id}}"
                  },
                "callbackFunction":"runClientFns"
                }
              }
            }' |>
            # because json uses curly braces, I set the glue braces to double
            # braces
            glue::glue(.open = "{{", .close = "}}")
          
          ws$send(send_json)
          
          # small delay between calls to keep the server from overloading
          Sys.sleep(0.5)
          
          T
        }
      )
  )

ws$close()
